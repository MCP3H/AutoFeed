// -- BIBLIOTECAS PARA SUPORTE AO PROJETO --
// Biblioteca usada para o servo motor
#include <Servo.h>
// Biblioteca usada para a balança
#include "HX711.h"
// Biblioteca usada para a conexão MQTT
#include <SPI.h>
#include <Ethernet.h>
#include <PubSubClient.h>

// -- VARIAVEIS GLOBAIS --
#define seconds() (millis()/1000)

// CONEXAO MQTT
byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };
IPAddress ip(192, 168, 0, 100);
char* server = "broker.hivemq.com";
void callback(char* topic, byte* payload, unsigned int length);
EthernetClient ethClient;
PubSubClient mqttClient(server, 1883, callback, ethClient);
int pinLedVerde = 5;
int pinLedVermelho = 6;

// MODULO HX711 - BALANCA
#define DOUT  A0 
#define CLK  A1
HX711 balanca;
float calibration_factor = 884000;
float pesoInicialSemZerar = 0.157;
float pesoDiferenca = 0.015;
float pesoIdeal = 0.038 - pesoDiferenca;
float peso = 0;

// SERVOMOTOR - ALAVANCA
boolean statusAlavanca = false;
Servo myservo;
int pos = 0;
int tempoAtual = 0;
int tempoAbrirAlavanca = 5;
int tempoTotal = 0;
bool abrirAlavanca = true;
int tempoPeso = 5;
int pesoInfo = 5;

// -- SETUP --
void setup(){
  // PORTA SERIAL ABERTA
  Serial.begin(9600);

  // INICIALIZAÇÃO DA BALANÇA
  balanca.begin(DOUT, CLK);
  balanca.set_scale(calibration_factor);

  // INICIALIZAÇÃO DO SERVO MOTOR
  myservo.attach(7);
  myservo.write(0);

  // LEDS
  pinMode(pinLedVerde, OUTPUT);
  pinMode(pinLedVermelho, OUTPUT);
  digitalWrite(pinLedVermelho, HIGH);
  
  // CONEXÃO MQTT
  Ethernet.begin(mac, ip);
  delay(3000);
  mqttClient.setServer(server, 1883);
  if (mqttClient.connect("AutoFeed")) {
    mqttClient.publish("conexao","Conexão estabelecida com o servidor!!");
    mqttClient.subscribe("broker");
  }else{
    Serial.println("Não foi possível estabelecer conexão com o servidor!!");
  }
    
  //CONFIGURAÇÕES INCIAIS
  Serial.println("---- AutoFeed ----");
  
  Serial.print("Quantidade de ração: ");
  Serial.print(pesoIdeal*1000);
  Serial.println(" gramas.");
  
  Serial.print("Tempo para abrir a alavanca: ");
  Serial.print(tempoAbrirAlavanca);
  Serial.println(" segundos.");

  Serial.print("Tempo para enviar peso ao servidor: ");
  Serial.print(tempoPeso);
  Serial.println(" segundos.");

  Serial.print("Fator de calibração: "); 
  Serial.println(calibration_factor); 

  Serial.print("Peso atual: ");
  Serial.print(pegaPeso(),3);
  Serial.println(" kg");

  Serial.println("----------------------");
}

// -- LOOP --
void loop(){
  //Manter conexão com servidor
  mqttClient.loop();

  // Calibra e pega peso da balança
  balanca.set_scale(calibration_factor);
  peso = pegaPeso();

  //Caso tenha passado o tempo configurado, envia mensagem para o servidor
  if (seconds() > pesoInfo) {
    Serial.print("Peso atual: ");
    Serial.print(peso,3);
    Serial.println(" kg");
    char result[8];
    dtostrf(peso*1000, 6, 2, result);
    mqttClient.publish("pesoPote",result);
    pesoInfo = seconds() + tempoPeso;
  }
 
  // Caso o peso seja maior que o que foi configurado pelo usuário, a alavanca é aberta, se não mantém fechada
  if (peso < pesoIdeal){
    abreAlavanca();
  }else{
    fechaAlavanca();
  }

  // Delay para não sobrecarregar o servidor
  delay(500);
}


// -- FUNÇÕES AUXILIARES --
void zeraBalanca ()
{
  Serial.println();
  balanca.tare();
  Serial.println("Balança Zerada ");
}

void abreAlavanca() {
  if (!statusAlavanca){
    if (abrirAlavanca){
      tempoAtual = seconds();
      abrirAlavanca = false;
    }
    //Antes de abrir a alavanca, é aguardado um tempo configurado pelo usuário
    tempoTotal = tempoAtual + tempoAbrirAlavanca;
    if (seconds() > tempoTotal){
      mqttClient.publish("statusAlavanca","Alavanca foi aberta!!");
      for (pos = 0; pos <= 90; pos += 1) {
        myservo.write(pos);
        delay(10);
      }
      statusAlavanca = true;
    }
  }
}

void fechaAlavanca() {
  if (statusAlavanca){
    mqttClient.publish("statusAlavanca","Alavanca foi fechada!!");
    for (pos = 90; pos >= 0; pos -= 1) {
      myservo.write(pos);
      delay(5);
    }
    statusAlavanca = false;
    abrirAlavanca = true;
  }
}

volatile float pegaPeso() {
  return balanca.get_units() - pesoInicialSemZerar;
}

void callback(char* topic, byte* payload, unsigned int length) {
  String opcao = getCommand(payload, length);
  
  if (opcao == "conectado"){
    //Ao receber mensagem do broker, ajuste o led verde
    digitalWrite(pinLedVerde, HIGH);
    digitalWrite(pinLedVermelho, LOW);
    Serial.println("Conexão estabelecida com o Node-Red!!");
    Serial.println("----------------------");
  }
  
}

String getCommand(byte* payload, unsigned int length){
  String command;
  for(int i=0; i<length; i++)
  {
     command = command + (char)payload[i];
  }
  return command;
}
